{"version":3,"sources":["components/MemoryCard.js","components/GameBoard.js","components/NewGame.js","components/PlayAgain.js","App.js","reportWebVitals.js","index.js"],"names":["cardBack","background","borderRadius","MemoryCard","id","imgUrl","flipped","guessed","flip","useState","gameStart","setgameStart","useEffect","setInterval","flipCard","e","target","className","isFlipped","flipDirection","style","onClick","backgroundImage","backgroundColor","cursor","GameBoard","cards","won","click","memoryCards","setMemoryCards","cb","tempCard","map","card","handleFlip","filter","found","length","isMatch","flippedCards","matchesId","hasWon","setTimeout","indexOf","every","url","NewGame","play","time","visible","setVisible","visibility","timeStart","moment","format","PlayAgain","again","App","newGame","setNewGame","setWon","setCards","clicks","setClicks","setTime","shuffleCards","a","i","j","Math","floor","random","resetGame","initGame","tempCards","amount","createId","id2","rand","card1","card2","push","generateDeck","actualTime","ms","diff","timeData","duration","_data","hours","minutes","seconds","toString","substring","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e6080ce3.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport ReactCardFlip from \"react-card-flip\";\r\n\r\nconst cardBack = {\r\n  background: \"#b326cf\",\r\n  borderRadius: \"20%\",\r\n};\r\n\r\nexport default function MemoryCard({ id, imgUrl, flipped, guessed, flip }) {\r\n  const [gameStart, setgameStart] = useState(true);\r\n  useEffect(() => {\r\n    setInterval(() => {\r\n      setgameStart(!gameStart);\r\n    }, 2000);\r\n  }, []);\r\n  const flipCard = (e) => {\r\n    if (guessed || flipped) return;\r\n    flip(e.target.id);\r\n  };\r\n\r\n  return (\r\n    <div className=\"card\">\r\n      <ReactCardFlip\r\n        isFlipped={gameStart ? gameStart : flipped}\r\n        flipDirection=\"horizontal\"\r\n      >\r\n        <div\r\n          id={id}\r\n          className=\"memoryCard front\"\r\n          style={cardBack}\r\n          key=\"front\"\r\n          onClick={flipCard}\r\n        />\r\n        <div\r\n          className=\"memoryCard back\"\r\n          key=\"back\"\r\n          onClick={flipCard}\r\n          style={{\r\n            backgroundImage: `url(${imgUrl})`,\r\n            backgroundColor: guessed ? \"green\" : \"#3b2980\",\r\n            cursor: guessed ? \"\" : \"pointer\",\r\n          }}\r\n        ></div>\r\n      </ReactCardFlip>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport MemoryCard from \"./MemoryCard\";\r\nexport default function GameBoard({ cards, won, click }) {\r\n  const [memoryCards, setMemoryCards] = useState([]);\r\n  useEffect(() => {\r\n    setMemoryCards(cards);\r\n  }, [cards]);\r\n  const countFlippedCards = () => {\r\n    return memoryCards.filter(({ flipped, found }) => flipped && !found).length;\r\n  };\r\n\r\n  const flipCard = (id, cb) => {\r\n    const tempCard = memoryCards.map((card) => {\r\n      if (card.id === id) {\r\n        card.flipped = true;\r\n      }\r\n      return card;\r\n    });\r\n    setMemoryCards(tempCard);\r\n    if (cb) {\r\n      cb();\r\n    }\r\n  };\r\n\r\n  const handleFlip = (id) => {\r\n    switch (countFlippedCards()) {\r\n      case 0:\r\n        flipCard(id);\r\n        break;\r\n      case 1:\r\n        click();\r\n        flipCard(id, () => {\r\n          isMatch();\r\n        });\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const isMatch = () => {\r\n    const flippedCards = memoryCards.filter(\r\n      (card) => card.flipped && !card.found\r\n    );\r\n    if (\r\n      flippedCards[0].matchesId === flippedCards[1].id ||\r\n      flippedCards[1].matchesId === flippedCards[0].id\r\n    ) {\r\n      memoryCards.map((card) => {\r\n        switch (card.id) {\r\n          case flippedCards[0].id:\r\n          case flippedCards[1].id:\r\n            card.found = true;\r\n            return card;\r\n          default:\r\n            return card;\r\n        }\r\n      });\r\n      hasWon();\r\n    } else {\r\n      setTimeout(() => {\r\n        memoryCards[memoryCards.indexOf(flippedCards[0])].flipped = false;\r\n        memoryCards[memoryCards.indexOf(flippedCards[1])].flipped = false;\r\n        setMemoryCards(memoryCards);\r\n      }, 800);\r\n    }\r\n  };\r\n\r\n  const hasWon = () => {\r\n    let win = memoryCards.every((card) => card.found);\r\n    if (win) {\r\n      won();\r\n    }\r\n  };\r\n\r\n  const createBoard = () =>\r\n    memoryCards.map((card) => (\r\n      <MemoryCard\r\n        key={card.id}\r\n        flipped={card.flipped}\r\n        found={card.found}\r\n        id={card.id}\r\n        imgUrl={card.url}\r\n        flip={handleFlip}\r\n      />\r\n    ));\r\n\r\n  return <div className=\"cards\">{createBoard()}</div>;\r\n}\r\n","import React, { useState } from \"react\";\r\nimport moment from \"moment\";\r\nexport default function NewGame({ play, time }) {\r\n  const [visible, setVisible] = useState(true);\r\n\r\n  return (\r\n    <div className=\"menu-item\">\r\n      <button\r\n        className=\"btn btn-play\"\r\n        style={{ visibility: visible ? \"visible\" : \"hidden\" }}\r\n        onClick={() => {\r\n          setVisible(!visible);\r\n          play();\r\n          let timeStart = moment().format(\"h:mm:ss\");\r\n          time(timeStart);\r\n        }}\r\n      >\r\n        PLAY\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function PlayAgain({ again }) {\r\n  return (\r\n    <div className=\"menu-item\">\r\n      <button className=\"btn\" onClick={() => again()}>\r\n        Play again?\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\nimport GameBoard from \"./components/GameBoard\";\nimport NewGame from \"./components/NewGame\";\nimport PlayAgain from \"./components/PlayAgain\";\nimport moment from \"moment\";\nexport default function App() {\n  let [newGame, setNewGame] = useState(false);\n  let [won, setWon] = useState(false);\n  let [cards, setCards] = useState([]);\n  let [clicks, setClicks] = useState(0);\n  let [time, setTime] = useState([]);\n\n  const countClicks = () => {\n    setClicks(++clicks);\n  };\n\n  const generateDeck = () => {\n    setCards([]);\n    let amount = 10;\n    let tempCards = [];\n    for (let i = 1; i < amount + 1; i++) {\n      let id = createId();\n      let id2 = createId();\n      let rand = Math.floor(Math.random() * 300) + 1;\n      const card1 = {\n        id: id,\n        matchesId: id2,\n        url: `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${rand}.png`,\n        flipped: false,\n        found: false,\n      };\n      const card2 = {\n        id: id2,\n        matchesId: id,\n        url: `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${rand}.png`,\n        flipped: false,\n        found: false,\n      };\n\n      tempCards.push(card1);\n      tempCards.push(card2);\n    }\n    shuffleCards(tempCards);\n    setCards(tempCards);\n  };\n\n  const shuffleCards = (a) => {\n    for (let i = a.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [a[i], a[j]] = [a[j], a[i]];\n    }\n    return a;\n  };\n\n  const resetGame = () => {\n    setWon(false);\n    setTime([]);\n    setCards([]);\n    setClicks(0);\n    initGame();\n  };\n\n  const hasWon = () => {\n    setWon(true);\n    const actualTime = moment().format(\"h:mm:ss\");\n    const ms = moment(actualTime, \"h:mm:ss\").diff(moment(time, \"h:mm:ss\"));\n    const timeData = moment.duration(ms)._data;\n\n    setTime(\n      `Your time : ${timeData.hours}h:${timeData.minutes}m:${timeData.seconds}s`\n    );\n  };\n\n  const initGame = () => {\n    generateDeck();\n    setNewGame(true);\n  };\n\n  return (\n    <div>\n      <h1 className=\"headline\">MEMORY CARDS</h1>\n      <div className=\"board-container\">\n        {newGame ? (\n          <GameBoard cards={cards} won={hasWon} click={countClicks} />\n        ) : null}\n        {newGame && (\n          <>\n            <p className=\"message center\">Total flips: {clicks}</p>\n            <button className=\"btn\" onClick={resetGame}>\n              RESTART\n            </button>\n          </>\n        )}\n      </div>\n      {won && (\n        <div className=\"modal\">\n          <div className=\"won\">\n            <div className=\"message\">{<h2>You win!</h2>}</div>\n            <div className=\"message\">{<h2>{time} </h2>}</div>\n            <PlayAgain again={resetGame} />\n          </div>\n        </div>\n      )}\n      <div className=\"menu\">\n        <NewGame play={initGame} time={setTime} />\n      </div>\n    </div>\n  );\n}\n\nconst createId = () => {\n  return (\n    Math.random().toString(36).substring(2, 15) +\n    Math.random().toString(36).substring(2, 15)\n  );\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}